파일 입출력 (되도록이면 표준함수를 사용하는게 좋음)
1. 표준함수는 무엇인가?
2. 파일 입출력 함수
	1) 자주쓰이는 함수: fopen() - 입출력 모드 암기, fprintf(), fseek() - fseek+ftell 함수를 활용하여 파일의 크기를 구할 수 있음
3. 파일 입출력은 텍스트 모드와 이진 모드의 두 가지 저장 형식을 갖고 있다.
	1) 텍스트 모드: 사용자에게 값을 아스키 코드로 표시해주는 모드. 윈도우나 도스는 행의 끝(개행)을 0D(CR)와 0A(LF) 두 문자로 표현하지만, C 언어는 0A만을 사용해 표현한다. 또한, 파일의 끝을 1A로 처리
		=> 리눅스나 다른 운영체제에서 개행문자 입력 시 이상한 문자가 나오는 경우는 텍스트 모드의 차이 때문에 발생하는것이다.
	2) 이진 모드: 있는 그대로의 값을 보여주는 모드
	3) UNIX 계열의 운영체제들은 C언어 기준 모드를 지원한다.
4. I/O는 Disk에 직접 접근하는 것이기 때문에 최소한의 작업을 해야한다. (여러 데이터를 한꺼번에 저장하기)
5. 키보드 버퍼 비우는 방법
	1) 2013 C 표준 이전에는 fflush(stdin)으로 키보드 입력 버퍼 비우는 문법으로 사용했지만 이는 맞지 않는 문법이다. 사실 fflush는 해당 방향으로 결과를 내보내라는 의미이다. 대체로 2013 C 표준 이후로는 rewind(FILE *)를 지원한다.
6. 파일의 헤더: 특정 파일들은 파일의 앞단에 임의의 format을 표시하여 파일의 정체성(Identify와 같은)을 부여하여 파일을 구분하게 하기위한 요소
7. 프로그램
	1) Hexa editer: HxD
8. 서버의 데이터(가차 확률, 능력치의 계산 등의 게임 플레이에 예민한 부분)은 암호화로 감추는 편이다. (복잡하지 않은 정도로)

질문
1. printf 문에서는 fflush(stdout)이 일어나는가?
2. fputc를 했을때 가상메모리 어느 영역에 저장이 되는가? Heap이다. Data 영역은 컴파일 시 메모리의 크기 및 주소가 모두 결정되기 때문이다(Runtime에는 추가적인 메모리가 할당되지 않는 것을 의미함). Stack 영역은 함수가 끝나면 휘발하기 때문에 적절치 않다. 

과제
1. 파일의 암호화와 복호화를 구현하라