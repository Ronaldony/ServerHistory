게임 서버
 1. 게임 조작 처리
	1) 길찾기
		(1) 서버 기준 처리: 클라(게임 이용자)에서 화면 터치 시 서버에 요청(스스로 어떤 로직 판단을 하지 않는다.) -> 요청한 좌표 검증 -> 계산된 절대 좌표를 모든 유저에 전송
		(2) 클라 기준 처리: 경로와 목적지를 서버로 검증 요청 전송 -> 서버가 검증 후 처리
		(3) 클라 기준 처리2: 클라가 경로를 일정 단위로 나누어 서버에 검증을 요청 -> 서버가 검증 후 처리
		(*) 데드 레커닝: 신호가 오지 않는 동안의 행동을 클라이언트에서 추측하여 상태를 갱신 하는 알고리즘
		(**) 국내 통신사 기준 3ms, 5ms 정도의 네트워크 지연이 발생한다. (그래서 국내에서는 네트워크 지연이 없다고 본다.)
	2) 이동 조작
		(1) 목적지가 없는 이동 방식
			(2-1) 사용자 이동 조작 시작 시 움직이는 모션을 추가하여 어색하지 않게 한다.
			(2-2) 사용자 이동 조작이 종료될 시 짧은 시간 안에 캐릭터의 현재 좌표 기준으로 목적지를 계산하여 모든 클라이언트에게 전달한다. (결국 목적지를 계산하여야 한다.)
			(2-3) 캐릭터 주위에 더미 오브젝트를 생성하여 캐릭터가 더미를 따라가게 하는 방식을 사용한다.
				=> 일부 게임의 경우 더미를 기준으로 허용 이동 반경을 주어 통신이 끊겨도 유저가 이동할 수 있게 한다.
		(2) 이동 이슈: 사용자가 이동 조작 시 RTT를 느끼지 못하게 하기 위하여 서버 검증 이전에 이동을 시작한다.
		(3) 이동의 경우 늦게 출발하는 건 큰 문제는 아니지만 사용자가 입력한 것보다 더 이동하는건 문제가 된다.
	3) 공격 조작
		(1) 타겟팅: 타겟 검증, 공격 가능 거리 등의 판단을 서버에서 판단
		(2) 논타겟팅: 좌표 동기화가 세밀하게 되어 있어야 한다. 타겟팅보다 훨씬 더 프레임 (2차원 처리 타일-그리드 방식으로 처리하면 쉽다.)
		(3) 만약 유저에게 논타켓팅스러운 연출을 요구 시 클라에서는 오토 타겟팅, 서버에서는 타겟팅으로 처리하는 것이 무난한 선택이다.
 2. Round Trip Time(RTT): 클라 요청이 시작되어 게임 서버를 거쳐 다시 클라에게 결과가 도착하는 시간
 3. LockStep: 모든 프레임을 동기화시키는 방식, 컨트롤 동기화. 온라인에서는 사용하지 않는 방식이다.

찾아볼 것
 데드 레커닝, RTT, LockStep, 레이캐스팅, 삼각 함수(거리 계산)