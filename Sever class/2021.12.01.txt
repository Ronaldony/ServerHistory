유저의 프로그램 접근을 막는 방법
 1. 프로그램 실행마다 Stack의 메모리 위치를 바꿈으로써 해킹을 어렵게 해야한다.

랜더링 기법
 1. 더블 버퍼링
	1) 정의: 게임 화면을 갱신할 때마다 깜빡이는 현상 해결 -> 게임 화면의 완성본을 만들어놓고 기존 화면에 덮어씌워야함
	2) window를 사용한다면 GDI에 맞게 더블 버퍼링을 구현해야함
	*) 기본적으로 비디오 카드는 비디오 메모리를 긁어서 모니터에 출력하고 있다.
	**) VGA모드 표준(320x200x256): 예전 도스 시절 모든 게임사가 VGA 모드에 맞춰 0xA000 0000(비디오 메모리 영역)을 수정하여 모니터 화면을 수정하였다.
 2. Swap chain
	1) 화면을 표시할(렌더링할) 버퍼를 교체하는(Swap) 방법
	2) Primary 서피스(=front buffer): 현재 비디오 카드가 가리키는 메모리
	3) Back 서피스(=back buffer): 화면으로 출력하려는 임의의 메모리
	4) Swap chain의 문제점: Tearing(Swap 과정 중 이전 프레임과 다음 프레임이 겹치는 현상) => Drirect3D는 이 문제를 해결하기 위하여 수직 재지정, 백 버퍼링 등의 기술을 사용한다.
 3. 키 입력
	1) DirectIX의 경우 Direct 전용 입력 함수 사용
	2) getasynckeystate: 리턴값의 MSB와 LSB의 활용도가 다르다. MSB(현재 눌렸냐), LSB(이전 호출과 현재 호출 사이에 키가 눌렸냐)
G-SYNC
 
과제
 1. 핑퐁 게임(혹은 갤러그) - 소스 코드 제출해야함
	=> 좌표 예외 처리 min, max 함수 활용
	=> 키보드, 로직, 렌더, 대기 순서의 구조로 프로그램(MVC 모델과 유사)
	=> 소스코드 나누기